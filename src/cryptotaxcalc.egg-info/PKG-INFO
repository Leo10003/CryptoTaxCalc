Metadata-Version: 2.4
Name: cryptotaxcalc
Version: 0.1.0
Summary: Crypto tax calculation engine for Croatia and Italy
Author: Your Name
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.110
Requires-Dist: uvicorn>=0.29
Requires-Dist: sqlalchemy>=2.0
Requires-Dist: pydantic>=2.5
Requires-Dist: pandas
Requires-Dist: numpy
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"

# CryptoTaxCalc

FastAPI-based crypto tax calculator with FIFO realization, run history persistence, downloadable artifacts, automated smoke tests (local + CI), Telegram alerts, and optional auto-push to GitHub.

---

## ✨ Features

- **FIFO engine**: Calculates cost basis, proceeds, gains.
- **Persistence**: Every `/calculate` run is stored (SQLite) with a `run_id` (UUID).
- **History API**:
  - `GET /history` – list recent calculation runs.
  - `GET /history/{run_id}` – details for a specific run.
  - `GET /history/{run_id}/download` – zipped bundle of the run (JSON + artifacts).
- **Audit trail**: Audit events tied to each `run_id`.
- **Smoke tests**:
  - Local: `pytest -q -m smoke`
  - CI: GitHub Actions runs on each push, optional Telegram alerts on start/success/failure.
- **Automation**:
  - Windows Task Scheduler runner for nightly smoke + alerts.
  - `git_auto_push.ps1` for auto-commit/push (manual or scheduled).
- **Telegram notifications**: Start, success, failure pings.

---

## 🗂️ Project Layout (key files)

CryptoTaxCalc/
├─ src/cryptotaxcalc/
│ ├─ app.py # FastAPI app, /calculate + /history endpoints
│ ├─ db.py # SQLite models & init
│ ├─ fifo_engine.py # FIFO calculation core
│ ├─ audit_utils.py # audit helpers
│ ├─ audit_digest.py # run manifest
│ ├─ schemas.py, models.py # Pydantic & SQLAlchemy
│ └─ about.py
├─ tests/
│ └─ smoke_test.py # smoke tests (API + persistence + download)
├─ automation/
│ ├─ run_smoke_and_email.py # runs smoke and sends Telegram alerts
│ ├─ run_smoke_wrapper.ps1 # wrapper (loads .env, runs python, logs)
│ ├─ git_auto_push.ps1 # auto add/commit/push + (optional) Telegram
│ ├─ generate_task_xml.py # helper to generate Task Scheduler XML
│ └─ nightly_smoke_task.xml # ready-to-import Task Scheduler definition
├─ .github/workflows/
│ └─ smoke.yml # CI smoke on push
├─ .env # local secrets/config (NOT committed)
├─ data.db # SQLite database (local dev)
└─ README.md

yaml
Kopiraj kod

---

## ✅ Requirements

- Python 3.12 (recommended) + venv
- Git
- Windows PowerShell (for automation scripts)
- (Optional) Telegram Bot & Chat for alerts

---

## 🚀 Setup & Run

### 1) Create & activate venv, install deps

```powershell
python -m venv .venv
.\.venv\Scripts\Activate.ps1
pip install -U pip
pip install -r requirements.txt
If you don’t have requirements.txt, install the known essentials:

powershell
Kopiraj kod
pip install fastapi uvicorn[standard] sqlalchemy pydantic httpx reportlab pytest python-dotenv
2) Environment variables (.env)
Create .env in the project root:

ini
Kopiraj kod
# Telegram alerts (optional but recommended)
TELEGRAM_BOT_TOKEN=123456:ABC...
TELEGRAM_CHAT_ID=123456789

# (Optional) Additional config consumed by scripts/app can go here
# e.g. LOG_DIR, DB_PATH, etc. Defaults are sensible.
Keep .env out of source control.

3) Initialize DB (auto)
On first run the app will create tables/indexes automatically.

4) Run the API locally
powershell
Kopiraj kod
python -m uvicorn --app-dir src cryptotaxcalc.app:app --reload --host 127.0.0.1 --port 8000
Open Swagger: http://127.0.0.1:8000/docs

🔌 API Endpoints (quick guide)
GET /calculate
Runs FIFO over current transactions, persists a new run, returns summary and run_id (UUID).

GET /history
Returns an array of persisted runs (metadata).

GET /history/{run_id}
Returns details for run_id.

GET /history/{run_id}/download
Returns a ZIP with run artifacts (JSON etc.).

🧪 Smoke Tests
Local
powershell
Kopiraj kod
pytest -q -m smoke --maxfail=1 --disable-warnings -rA
Requires httpx, reportlab, etc. (see requirements above).

CI (GitHub Actions)
Workflow file: .github/workflows/smoke.yml

Triggers on push.

Uses repository Secrets for Telegram:

TELEGRAM_BOT_TOKEN

TELEGRAM_CHAT_ID

Configure in GitHub: Settings → Secrets and variables → Actions → New repository secret

CI logs will show whether Telegram steps were skipped (if secrets missing) or sent.

🔔 Telegram Alerts
Both local run_smoke_and_email.py and CI can send:

Start ping (“Smoke test started”)

Success ping

Failure ping (with exit code; includes stdio snippets if available)

Make sure .env (local) or Actions secrets (CI) have:

ini
Kopiraj kod
TELEGRAM_BOT_TOKEN=...
TELEGRAM_CHAT_ID=...
🕗 Nightly Smoke via Windows Task Scheduler (local)
You can import the prebuilt XML:

automation\nightly_smoke_task.xml

Or run the helper:

powershell
Kopiraj kod
python automation\generate_task_xml.py
Then in Task Scheduler:

Import Task… → pick nightly_smoke_task.xml.

Confirm “Run whether user is logged on or not”.

Set time (e.g., 00:00), save with your credentials.

What runs:
automation\run_smoke_wrapper.ps1 → loads .env, runs automation\run_smoke_and_email.py, logs, and posts Telegram pings.

Logs:

automation\task_wrapper.log (wrapper)

automation\smoke_YYYY-MM-DD_HH-MM-SS.log (per-run)

automation\last_alert.txt (debug last Telegram payload)

🔁 Auto Git Push (manual or scheduled)
Script: automation\git_auto_push.ps1

Adds/commits all changes with an auto message.

Pushes to the configured remote.

Optionally sends a Telegram ping on success/failure (if .env has Telegram vars).

Manual run:

powershell
Kopiraj kod
powershell -ExecutionPolicy Bypass -File automation\git_auto_push.ps1
Schedule it (optional):
Create a Task Scheduler task pointing to git_auto_push.ps1.
Ensure your remote is set (and credentials stored if you use HTTPS):

powershell
Kopiraj kod
git remote -v
# If needed:
git remote set-url origin https://<TOKEN>@github.com/<USER>/<REPO>.git
git config --global credential.helper store
If you see non-fast-forward or fetch first errors:

powershell
Kopiraj kod
git pull --rebase origin main
# resolve if needed, then:
git push origin main
🧰 Troubleshooting
No Telegram alerts

Check .env exists and has valid TELEGRAM_BOT_TOKEN & TELEGRAM_CHAT_ID.

Look at automation\task_wrapper.log and automation\last_alert.txt.

For CI, verify repo Actions secrets are set.

Task shows Last Result: 1/2

Open automation\task_wrapper.log for exact error.

Ensure Execution Policy allows the script (wrapper sets Bypass).

Verify Python venv path in run_smoke_wrapper.ps1 points to .venv\Scripts\python.exe.

Git push rejected

git pull --rebase origin main, resolve conflicts, re-run push.

Ensure DB lock files (data.db-shm, data.db-wal) are not held by a running server when committing.

Module import errors in CI

Add missing packages to requirements.txt (e.g., reportlab, httpx).

🔒 Security Notes
Never commit your .env.

Prefer a scoped GitHub Personal Access Token when embedding credentials in remotes.

Telegram bot token and chat ID should be secrets (local .env, CI secrets).

📜 License
MIT (or your chosen license).

🙌 Acknowledgements
Thanks to everyone who contributed to wiring endpoints, persistence, smoke tests, Windows automation, and CI!

pgsql
Kopiraj kod

If you want, I can also generate a trimmed `requirements.txt` based on what we used so far.
::contentReference[oaicite:0]{index=0}
